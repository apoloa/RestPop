'use strict';

const cluster = require('cluster');
const os = require('os');

const logger = require('../lib/logger');

const restApp = require('../server/rest');
const config = require('../config/service-config');

/**
 * Function that create a server
 */
function createServer () {
    restApp.listen(config.apiPort, function () {
        logger.info(`${restApp.name} listenting at ${restApp.url}`);
    });
}

if (config.cluster) {
    if (cluster.isMaster) {
        cluster.on('listening', function (worker, address) {
            logger.info(`Worker ${ worker.id} con pid ${worker.process.pid} is now connected to port ${address.port}`);
        });

        cluster.on('exit', function (worker, code, signal) {
            logger.error(`Worker  ${worker.process.pid} died with code: ${code}, and signal: ${signal}`);
            logger.info('Starting a new worker');
            cluster.fork();
        });

        cluster.on('disconnect', function (worker) {
            logger.info(`The worker # ${worker.id} has disconnected`);
        });

        const numCPUs = os.cpus().length;

        logger.info(`Starting cluster for ${numCPUs} cpus...`);

        // Fork workers.
        for (let i = 0; i < numCPUs; i++) {
            cluster.fork();
        }
    } else {
        // Finish control cluster
        createServer();
    }
} else {
    createServer();
}